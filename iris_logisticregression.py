# -*- coding: utf-8 -*-
"""Iris_LogisticRegression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZyGSE0GHRwclA3qixGX66hnfRytol-jY

# One Vs All Method : Using logistic Regression

Data Formating
"""

# Commented out IPython magic to ensure Python compatibility.
#importing dependencies
import numpy as np
import pandas as pd
from pandas import Series, DataFrame

import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')

# %matplotlib inline

"""Load the data from scikit learn library"""

from sklearn import linear_model
from sklearn.datasets import load_iris

#load the data
iris = load_iris()

#grab the features (X) and the target (y)
x = iris.data
y = iris.target

# show the built-in data description
print(iris.DESCR)

"""Put the data into pandas DataFrame"""

#grab data
iris_data = DataFrame(x, columns=['Sepal Lenght', 'Sepal Width', 'Petal Lenght', 'Petal Width'])

#grab target
iris_target = DataFrame(y, columns=['Species'])

"""Since species are defined as 0,1 and 2 so we need to rename them. For we can use apply(), to spit the column make a scheme function them combine it back together """

def flower(flower):
  if flower == 0:
    return 'Setosa'
  elif flower == 1:
    return 'Veriscolour'
  else:
    return 'Verginica'

#apply
iris_target['Species'] = iris_target['Species'].apply(flower)

#check
iris_target.head()

iris_data.tail()

iris_target.tail()

#Create a combined Iris DataSet
iris = pd.concat([iris_data, iris_target], axis = 1)

#review Data
iris.head()

"""Data Visualisation """

#Pairplot of all the different features
sns.pairplot(iris, hue = 'Species', size = 2)

"""Examine petal length of all the species"""

sns.factorplot('Petal Length', data = iris, hue = 'Species', size = 2)

"""## Multi-Class Classification with Sci Kit Learn

Multi-Class Classification using Logistic Regression Techniques. We have to split the data into Testing and Training sets. Then pass a test_size argument to have the testing data be 40% of the total data set. Also pass a random seed number.
"""

# Import SciKit Learn Log Reg
from sklearn.linear_model import LogisticRegression
from sklearn.cross_validation import train_test_split

# Create a Logistic Regression Class object
logreg = LogisticRegression()

# Split the data into Trainging and Testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.4,random_state=3)

# Train the model with the training set
logreg.fit(X_train, Y_train)

"""testing accuracy with the testing set. We'll make a prediction using our model and then check its accuracy"""

# Import testing metrics from SciKit Learn
from sklearn import metrics

# Prediction from X_test
Y_pred = logreg.predict(X_test)

#Check accuracy
print metrics.accuracy_score(Y_test,Y_pred)

